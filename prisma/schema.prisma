generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") != "" ? env("DATABASE_URL") : "postgresql://dummy:dummy@localhost:5432/dummy"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String
  phone             String?
  isVerified        Boolean   @default(false)
  verificationLevel String    @default("NONE")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  listings          Listing[]
  messages          Message[]
  reports           Report[]
  reviews           Review[]
  buyerChats        Chat[]    @relation("BuyerChats")
  sellerChats       Chat[]    @relation("SellerChats")
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  images      String[]
  categoryId  String
  condition   String
  location    String
  isActive    Boolean  @default(true)
  isSold      Boolean  @default(false)
  sellerId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  seller      User     @relation(fields: [sellerId], references: [id])
  reports     Report[]
  reviews     Review[]
  chats       Chat[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  listings Listing[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  chatId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  reporterId  String
  listingId   String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listing     Listing  @relation(fields: [listingId], references: [id])
  reporter    User     @relation(fields: [reporterId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  reviewerId String
  listingId  String
  createdAt  DateTime @default(now())
  listing    Listing  @relation(fields: [listingId], references: [id])
  reviewer   User     @relation(fields: [reviewerId], references: [id])
}

model Chat {
  id        String    @id @default(cuid())
  listingId String
  buyerId   String
  sellerId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listing   Listing   @relation(fields: [listingId], references: [id])
  buyer     User      @relation("BuyerChats", fields: [buyerId], references: [id])
  seller    User      @relation("SellerChats", fields: [sellerId], references: [id])
  messages  Message[]
}
