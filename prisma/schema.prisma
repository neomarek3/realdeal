// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String     @id @default(cuid())
  email             String     @unique
  name              String?
  password          String
  phone             String?
  isVerified        Boolean    @default(false)
  verificationLevel String     @default("NONE") // NONE, BASIC, FULL
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  listings          Listing[]
  messages          Message[]
  reports           Report[]
  reviews           Review[]
}

// Listing model
model Listing {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  images      String[]
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
  condition   String       // NEW, LIKE_NEW, GOOD, FAIR, POOR
  location    String
  isActive    Boolean      @default(true)
  isSold      Boolean      @default(false)
  seller      User         @relation(fields: [sellerId], references: [id])
  sellerId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reports     Report[]
  reviews     Review[]
}

// Category model
model Category {
  id       String    @id @default(cuid())
  name     String
  listings Listing[]
}

// Message model
model Message {
  id        String   @id @default(cuid())
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chatId    String
  createdAt DateTime @default(now())
}

// Report model
model Report {
  id          String   @id @default(cuid())
  reason      String
  description String?
  reporter    User     @relation(fields: [reporterId], references: [id])
  reporterId  String
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String
  status      String   @default("PENDING") // PENDING, REVIEWED, CLOSED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Review model
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  reviewer  User     @relation(fields: [reviewerId], references: [id])
  reviewerId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())
}